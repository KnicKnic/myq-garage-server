name: build

on:
  push:
    branches: 
    - master
    - main
  pull_request:
    branches:
    - master
    - main

    
env:
  SECRETS_ARE_AVAILABLE: ${{ secrets.DOCKERHUB_USERNAME }}
  BUILD_REPOSITORY: knicknic/myq-garage-server
  BUILD_PLATFORMS: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6 # all platforms from available platforms that are also available from debian:latest

jobs:
  amd64_only_build:
    # create a quick build to get sane output and error messages
    runs-on: ubuntu-latest
    steps:
    - 
      uses: actions/checkout@v2
    -
      #only installing this step because I couldn't figure out how to use build caching in docker otherwise
      name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        install: true
        # above aliases `docker buildx build` as `docker build`
    - 
      name: Build    
      run: |
        docker build . --platform linux/amd64 --cache-from type=registry,ref=${{ env.BUILD_REPOSITORY }}:build
        # DOCKER_BUILDKIT=1 docker build . --platform linux/amd64 --cache-from type=registry,ref=${{ env.BUILD_REPOSITORY }}:build
  build_all_arch:
    runs-on: ubuntu-latest
    steps:
    - 
      uses: actions/checkout@v2
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    -
      name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        install: true
        # above aliases `docker buildx build` as `docker build`
    -
      name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}
    -
      name: Build (run on PR from forks)
      if:  ${{ !env.SECRETS_ARE_AVAILABLE }}
      # all platforms from available platforms that are also available from debian:latest
      run: |
        docker build . --platform ${{ env.BUILD_PLATFORMS }} --cache-from type=registry,ref=${{ env.BUILD_REPOSITORY }}:build
    -
      name: Login to Docker Hub
      uses: docker/login-action@v2
      if:  ${{ env.SECRETS_ARE_AVAILABLE }}
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }} 
    -
      name: Build and push cache (run on PR not from forks)
      if:  ${{ env.SECRETS_ARE_AVAILABLE && github.event_name != 'push' }}
      # all platforms from available platforms that are also available from debian:latest
      run: |
        docker build . --platform ${{ env.BUILD_PLATFORMS }} --cache-from type=registry,ref=${{ env.BUILD_REPOSITORY }}:build --cache-to type=registry,ref=${{ env.BUILD_REPOSITORY }}:build,node=max,push=true
    -
      name: Build & push image & push cache
      if: ${{ github.event_name == 'push' }}
      # all platforms from available platforms that are also available from debian:latest
      run: |
        docker build . -t ${{ env.BUILD_REPOSITORY }}:test --platform ${{ env.BUILD_PLATFORMS }}  --cache-from type=registry,ref=${{ env.BUILD_REPOSITORY }}:build --cache-to type=registry,ref=${{ env.BUILD_REPOSITORY }}:build,node=max,push=true --push
